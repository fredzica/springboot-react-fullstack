buildscript {
	repositories {
		mavenLocal()
		mavenCentral()
	}
	dependencies {
        classpath("org.openapitools:openapi-generator-gradle-plugin:3.3.4")
	}
}

plugins {
	id 'org.springframework.boot' version '2.1.4.RELEASE'
	id 'java'
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.openapi.generator'
apply plugin: 'eclipse'

group = 'com.zica'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	junitVersion = "5.2.0"
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-web') {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
	}
	compile('org.springframework.boot:spring-boot-starter-jetty')

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-json'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testCompile "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
	testCompile "org.junit.jupiter:junit-jupiter-params:${junitVersion}"
	testRuntime "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
	compileOnly 'io.swagger:swagger-annotations:1.5.22'
	runtimeOnly 'com.h2database:h2'

}

test {
	useJUnitPlatform()
}

sourceSets {
	main {
		java {
			srcDirs(['src/main/java', 'build/generated/src/main/java'])
		}
		resources {
			srcDir 'src/main/resources'
		}
	}
}

def swaggerFilePath = 'src/main/resources/swagger.yaml'

// code to generate classes from the swagger specification
openApiGenerate {
	generatorName = "spring"
	inputSpec = swaggerFilePath.toString()
	outputDir = "$buildDir/generated".toString()
	apiPackage = 'com.zica.example.api'
	modelPackage = 'com.zica.example.model'
	configOptions = [
			dateLibrary  : "java8",
			useTags      : 'true',
			interfaceOnly: 'true'
	]
}
compileJava.dependsOn("openApiGenerate")
